package hu.daq.thriftconnector.talkback;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatusReport implements org.apache.thrift.TBase<StatusReport, StatusReport._Fields>, java.io.Serializable, Cloneable, Comparable<StatusReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusReport");

  private static final org.apache.thrift.protocol.TField MATCHPROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchprofile", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MATCHPHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchphase", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LEFTTEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("leftteam", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RIGHTTEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("rightteam", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BALLTIMELEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("balltimeleft", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField PLAYERSTAT_FIELD_DESC = new org.apache.thrift.protocol.TField("playerstat", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TSYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("tsync", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField LEFTTEAMTOS_FIELD_DESC = new org.apache.thrift.protocol.TField("leftteamtos", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RIGHTTEAMTOS_FIELD_DESC = new org.apache.thrift.protocol.TField("rightteamtos", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatusReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatusReportTupleSchemeFactory());
  }

  public int matchprofile; // required
  public int matchphase; // required
  public int leftteam; // required
  public int rightteam; // required
  public boolean balltimeleft; // required
  public List<PlayerStat> playerstat; // required
  public TimeSync tsync; // required
  public String leftteamtos; // required
  public String rightteamtos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MATCHPROFILE((short)1, "matchprofile"),
    MATCHPHASE((short)2, "matchphase"),
    LEFTTEAM((short)3, "leftteam"),
    RIGHTTEAM((short)4, "rightteam"),
    BALLTIMELEFT((short)5, "balltimeleft"),
    PLAYERSTAT((short)6, "playerstat"),
    TSYNC((short)7, "tsync"),
    LEFTTEAMTOS((short)8, "leftteamtos"),
    RIGHTTEAMTOS((short)9, "rightteamtos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MATCHPROFILE
          return MATCHPROFILE;
        case 2: // MATCHPHASE
          return MATCHPHASE;
        case 3: // LEFTTEAM
          return LEFTTEAM;
        case 4: // RIGHTTEAM
          return RIGHTTEAM;
        case 5: // BALLTIMELEFT
          return BALLTIMELEFT;
        case 6: // PLAYERSTAT
          return PLAYERSTAT;
        case 7: // TSYNC
          return TSYNC;
        case 8: // LEFTTEAMTOS
          return LEFTTEAMTOS;
        case 9: // RIGHTTEAMTOS
          return RIGHTTEAMTOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MATCHPROFILE_ISSET_ID = 0;
  private static final int __MATCHPHASE_ISSET_ID = 1;
  private static final int __LEFTTEAM_ISSET_ID = 2;
  private static final int __RIGHTTEAM_ISSET_ID = 3;
  private static final int __BALLTIMELEFT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MATCHPROFILE, new org.apache.thrift.meta_data.FieldMetaData("matchprofile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.MATCHPHASE, new org.apache.thrift.meta_data.FieldMetaData("matchphase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.LEFTTEAM, new org.apache.thrift.meta_data.FieldMetaData("leftteam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.RIGHTTEAM, new org.apache.thrift.meta_data.FieldMetaData("rightteam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.BALLTIMELEFT, new org.apache.thrift.meta_data.FieldMetaData("balltimeleft", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PLAYERSTAT, new org.apache.thrift.meta_data.FieldMetaData("playerstat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerStat.class))));
    tmpMap.put(_Fields.TSYNC, new org.apache.thrift.meta_data.FieldMetaData("tsync", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeSync.class)));
    tmpMap.put(_Fields.LEFTTEAMTOS, new org.apache.thrift.meta_data.FieldMetaData("leftteamtos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHTTEAMTOS, new org.apache.thrift.meta_data.FieldMetaData("rightteamtos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusReport.class, metaDataMap);
  }

  public StatusReport() {
  }

  public StatusReport(
    int matchprofile,
    int matchphase,
    int leftteam,
    int rightteam,
    boolean balltimeleft,
    List<PlayerStat> playerstat,
    TimeSync tsync,
    String leftteamtos,
    String rightteamtos)
  {
    this();
    this.matchprofile = matchprofile;
    setMatchprofileIsSet(true);
    this.matchphase = matchphase;
    setMatchphaseIsSet(true);
    this.leftteam = leftteam;
    setLeftteamIsSet(true);
    this.rightteam = rightteam;
    setRightteamIsSet(true);
    this.balltimeleft = balltimeleft;
    setBalltimeleftIsSet(true);
    this.playerstat = playerstat;
    this.tsync = tsync;
    this.leftteamtos = leftteamtos;
    this.rightteamtos = rightteamtos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatusReport(StatusReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.matchprofile = other.matchprofile;
    this.matchphase = other.matchphase;
    this.leftteam = other.leftteam;
    this.rightteam = other.rightteam;
    this.balltimeleft = other.balltimeleft;
    if (other.isSetPlayerstat()) {
      List<PlayerStat> __this__playerstat = new ArrayList<PlayerStat>(other.playerstat.size());
      for (PlayerStat other_element : other.playerstat) {
        __this__playerstat.add(new PlayerStat(other_element));
      }
      this.playerstat = __this__playerstat;
    }
    if (other.isSetTsync()) {
      this.tsync = new TimeSync(other.tsync);
    }
    if (other.isSetLeftteamtos()) {
      this.leftteamtos = other.leftteamtos;
    }
    if (other.isSetRightteamtos()) {
      this.rightteamtos = other.rightteamtos;
    }
  }

  public StatusReport deepCopy() {
    return new StatusReport(this);
  }

  @Override
  public void clear() {
    setMatchprofileIsSet(false);
    this.matchprofile = 0;
    setMatchphaseIsSet(false);
    this.matchphase = 0;
    setLeftteamIsSet(false);
    this.leftteam = 0;
    setRightteamIsSet(false);
    this.rightteam = 0;
    setBalltimeleftIsSet(false);
    this.balltimeleft = false;
    this.playerstat = null;
    this.tsync = null;
    this.leftteamtos = null;
    this.rightteamtos = null;
  }

  public int getMatchprofile() {
    return this.matchprofile;
  }

  public StatusReport setMatchprofile(int matchprofile) {
    this.matchprofile = matchprofile;
    setMatchprofileIsSet(true);
    return this;
  }

  public void unsetMatchprofile() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHPROFILE_ISSET_ID);
  }

  /** Returns true if field matchprofile is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchprofile() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHPROFILE_ISSET_ID);
  }

  public void setMatchprofileIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHPROFILE_ISSET_ID, value);
  }

  public int getMatchphase() {
    return this.matchphase;
  }

  public StatusReport setMatchphase(int matchphase) {
    this.matchphase = matchphase;
    setMatchphaseIsSet(true);
    return this;
  }

  public void unsetMatchphase() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHPHASE_ISSET_ID);
  }

  /** Returns true if field matchphase is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchphase() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHPHASE_ISSET_ID);
  }

  public void setMatchphaseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHPHASE_ISSET_ID, value);
  }

  public int getLeftteam() {
    return this.leftteam;
  }

  public StatusReport setLeftteam(int leftteam) {
    this.leftteam = leftteam;
    setLeftteamIsSet(true);
    return this;
  }

  public void unsetLeftteam() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEFTTEAM_ISSET_ID);
  }

  /** Returns true if field leftteam is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftteam() {
    return EncodingUtils.testBit(__isset_bitfield, __LEFTTEAM_ISSET_ID);
  }

  public void setLeftteamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEFTTEAM_ISSET_ID, value);
  }

  public int getRightteam() {
    return this.rightteam;
  }

  public StatusReport setRightteam(int rightteam) {
    this.rightteam = rightteam;
    setRightteamIsSet(true);
    return this;
  }

  public void unsetRightteam() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RIGHTTEAM_ISSET_ID);
  }

  /** Returns true if field rightteam is set (has been assigned a value) and false otherwise */
  public boolean isSetRightteam() {
    return EncodingUtils.testBit(__isset_bitfield, __RIGHTTEAM_ISSET_ID);
  }

  public void setRightteamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RIGHTTEAM_ISSET_ID, value);
  }

  public boolean isBalltimeleft() {
    return this.balltimeleft;
  }

  public StatusReport setBalltimeleft(boolean balltimeleft) {
    this.balltimeleft = balltimeleft;
    setBalltimeleftIsSet(true);
    return this;
  }

  public void unsetBalltimeleft() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALLTIMELEFT_ISSET_ID);
  }

  /** Returns true if field balltimeleft is set (has been assigned a value) and false otherwise */
  public boolean isSetBalltimeleft() {
    return EncodingUtils.testBit(__isset_bitfield, __BALLTIMELEFT_ISSET_ID);
  }

  public void setBalltimeleftIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALLTIMELEFT_ISSET_ID, value);
  }

  public int getPlayerstatSize() {
    return (this.playerstat == null) ? 0 : this.playerstat.size();
  }

  public java.util.Iterator<PlayerStat> getPlayerstatIterator() {
    return (this.playerstat == null) ? null : this.playerstat.iterator();
  }

  public void addToPlayerstat(PlayerStat elem) {
    if (this.playerstat == null) {
      this.playerstat = new ArrayList<PlayerStat>();
    }
    this.playerstat.add(elem);
  }

  public List<PlayerStat> getPlayerstat() {
    return this.playerstat;
  }

  public StatusReport setPlayerstat(List<PlayerStat> playerstat) {
    this.playerstat = playerstat;
    return this;
  }

  public void unsetPlayerstat() {
    this.playerstat = null;
  }

  /** Returns true if field playerstat is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerstat() {
    return this.playerstat != null;
  }

  public void setPlayerstatIsSet(boolean value) {
    if (!value) {
      this.playerstat = null;
    }
  }

  public TimeSync getTsync() {
    return this.tsync;
  }

  public StatusReport setTsync(TimeSync tsync) {
    this.tsync = tsync;
    return this;
  }

  public void unsetTsync() {
    this.tsync = null;
  }

  /** Returns true if field tsync is set (has been assigned a value) and false otherwise */
  public boolean isSetTsync() {
    return this.tsync != null;
  }

  public void setTsyncIsSet(boolean value) {
    if (!value) {
      this.tsync = null;
    }
  }

  public String getLeftteamtos() {
    return this.leftteamtos;
  }

  public StatusReport setLeftteamtos(String leftteamtos) {
    this.leftteamtos = leftteamtos;
    return this;
  }

  public void unsetLeftteamtos() {
    this.leftteamtos = null;
  }

  /** Returns true if field leftteamtos is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftteamtos() {
    return this.leftteamtos != null;
  }

  public void setLeftteamtosIsSet(boolean value) {
    if (!value) {
      this.leftteamtos = null;
    }
  }

  public String getRightteamtos() {
    return this.rightteamtos;
  }

  public StatusReport setRightteamtos(String rightteamtos) {
    this.rightteamtos = rightteamtos;
    return this;
  }

  public void unsetRightteamtos() {
    this.rightteamtos = null;
  }

  /** Returns true if field rightteamtos is set (has been assigned a value) and false otherwise */
  public boolean isSetRightteamtos() {
    return this.rightteamtos != null;
  }

  public void setRightteamtosIsSet(boolean value) {
    if (!value) {
      this.rightteamtos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MATCHPROFILE:
      if (value == null) {
        unsetMatchprofile();
      } else {
        setMatchprofile((Integer)value);
      }
      break;

    case MATCHPHASE:
      if (value == null) {
        unsetMatchphase();
      } else {
        setMatchphase((Integer)value);
      }
      break;

    case LEFTTEAM:
      if (value == null) {
        unsetLeftteam();
      } else {
        setLeftteam((Integer)value);
      }
      break;

    case RIGHTTEAM:
      if (value == null) {
        unsetRightteam();
      } else {
        setRightteam((Integer)value);
      }
      break;

    case BALLTIMELEFT:
      if (value == null) {
        unsetBalltimeleft();
      } else {
        setBalltimeleft((Boolean)value);
      }
      break;

    case PLAYERSTAT:
      if (value == null) {
        unsetPlayerstat();
      } else {
        setPlayerstat((List<PlayerStat>)value);
      }
      break;

    case TSYNC:
      if (value == null) {
        unsetTsync();
      } else {
        setTsync((TimeSync)value);
      }
      break;

    case LEFTTEAMTOS:
      if (value == null) {
        unsetLeftteamtos();
      } else {
        setLeftteamtos((String)value);
      }
      break;

    case RIGHTTEAMTOS:
      if (value == null) {
        unsetRightteamtos();
      } else {
        setRightteamtos((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MATCHPROFILE:
      return Integer.valueOf(getMatchprofile());

    case MATCHPHASE:
      return Integer.valueOf(getMatchphase());

    case LEFTTEAM:
      return Integer.valueOf(getLeftteam());

    case RIGHTTEAM:
      return Integer.valueOf(getRightteam());

    case BALLTIMELEFT:
      return Boolean.valueOf(isBalltimeleft());

    case PLAYERSTAT:
      return getPlayerstat();

    case TSYNC:
      return getTsync();

    case LEFTTEAMTOS:
      return getLeftteamtos();

    case RIGHTTEAMTOS:
      return getRightteamtos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MATCHPROFILE:
      return isSetMatchprofile();
    case MATCHPHASE:
      return isSetMatchphase();
    case LEFTTEAM:
      return isSetLeftteam();
    case RIGHTTEAM:
      return isSetRightteam();
    case BALLTIMELEFT:
      return isSetBalltimeleft();
    case PLAYERSTAT:
      return isSetPlayerstat();
    case TSYNC:
      return isSetTsync();
    case LEFTTEAMTOS:
      return isSetLeftteamtos();
    case RIGHTTEAMTOS:
      return isSetRightteamtos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatusReport)
      return this.equals((StatusReport)that);
    return false;
  }

  public boolean equals(StatusReport that) {
    if (that == null)
      return false;

    boolean this_present_matchprofile = true;
    boolean that_present_matchprofile = true;
    if (this_present_matchprofile || that_present_matchprofile) {
      if (!(this_present_matchprofile && that_present_matchprofile))
        return false;
      if (this.matchprofile != that.matchprofile)
        return false;
    }

    boolean this_present_matchphase = true;
    boolean that_present_matchphase = true;
    if (this_present_matchphase || that_present_matchphase) {
      if (!(this_present_matchphase && that_present_matchphase))
        return false;
      if (this.matchphase != that.matchphase)
        return false;
    }

    boolean this_present_leftteam = true;
    boolean that_present_leftteam = true;
    if (this_present_leftteam || that_present_leftteam) {
      if (!(this_present_leftteam && that_present_leftteam))
        return false;
      if (this.leftteam != that.leftteam)
        return false;
    }

    boolean this_present_rightteam = true;
    boolean that_present_rightteam = true;
    if (this_present_rightteam || that_present_rightteam) {
      if (!(this_present_rightteam && that_present_rightteam))
        return false;
      if (this.rightteam != that.rightteam)
        return false;
    }

    boolean this_present_balltimeleft = true;
    boolean that_present_balltimeleft = true;
    if (this_present_balltimeleft || that_present_balltimeleft) {
      if (!(this_present_balltimeleft && that_present_balltimeleft))
        return false;
      if (this.balltimeleft != that.balltimeleft)
        return false;
    }

    boolean this_present_playerstat = true && this.isSetPlayerstat();
    boolean that_present_playerstat = true && that.isSetPlayerstat();
    if (this_present_playerstat || that_present_playerstat) {
      if (!(this_present_playerstat && that_present_playerstat))
        return false;
      if (!this.playerstat.equals(that.playerstat))
        return false;
    }

    boolean this_present_tsync = true && this.isSetTsync();
    boolean that_present_tsync = true && that.isSetTsync();
    if (this_present_tsync || that_present_tsync) {
      if (!(this_present_tsync && that_present_tsync))
        return false;
      if (!this.tsync.equals(that.tsync))
        return false;
    }

    boolean this_present_leftteamtos = true && this.isSetLeftteamtos();
    boolean that_present_leftteamtos = true && that.isSetLeftteamtos();
    if (this_present_leftteamtos || that_present_leftteamtos) {
      if (!(this_present_leftteamtos && that_present_leftteamtos))
        return false;
      if (!this.leftteamtos.equals(that.leftteamtos))
        return false;
    }

    boolean this_present_rightteamtos = true && this.isSetRightteamtos();
    boolean that_present_rightteamtos = true && that.isSetRightteamtos();
    if (this_present_rightteamtos || that_present_rightteamtos) {
      if (!(this_present_rightteamtos && that_present_rightteamtos))
        return false;
      if (!this.rightteamtos.equals(that.rightteamtos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatusReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMatchprofile()).compareTo(other.isSetMatchprofile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchprofile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchprofile, other.matchprofile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchphase()).compareTo(other.isSetMatchphase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchphase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchphase, other.matchphase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeftteam()).compareTo(other.isSetLeftteam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftteam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftteam, other.leftteam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightteam()).compareTo(other.isSetRightteam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightteam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightteam, other.rightteam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalltimeleft()).compareTo(other.isSetBalltimeleft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalltimeleft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balltimeleft, other.balltimeleft);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerstat()).compareTo(other.isSetPlayerstat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerstat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerstat, other.playerstat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTsync()).compareTo(other.isSetTsync());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTsync()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tsync, other.tsync);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeftteamtos()).compareTo(other.isSetLeftteamtos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftteamtos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftteamtos, other.leftteamtos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightteamtos()).compareTo(other.isSetRightteamtos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightteamtos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightteamtos, other.rightteamtos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatusReport(");
    boolean first = true;

    sb.append("matchprofile:");
    sb.append(this.matchprofile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchphase:");
    sb.append(this.matchphase);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leftteam:");
    sb.append(this.leftteam);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rightteam:");
    sb.append(this.rightteam);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balltimeleft:");
    sb.append(this.balltimeleft);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerstat:");
    if (this.playerstat == null) {
      sb.append("null");
    } else {
      sb.append(this.playerstat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tsync:");
    if (this.tsync == null) {
      sb.append("null");
    } else {
      sb.append(this.tsync);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leftteamtos:");
    if (this.leftteamtos == null) {
      sb.append("null");
    } else {
      sb.append(this.leftteamtos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rightteamtos:");
    if (this.rightteamtos == null) {
      sb.append("null");
    } else {
      sb.append(this.rightteamtos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (tsync != null) {
      tsync.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusReportStandardSchemeFactory implements SchemeFactory {
    public StatusReportStandardScheme getScheme() {
      return new StatusReportStandardScheme();
    }
  }

  private static class StatusReportStandardScheme extends StandardScheme<StatusReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatusReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MATCHPROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchprofile = iprot.readI32();
              struct.setMatchprofileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MATCHPHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchphase = iprot.readI32();
              struct.setMatchphaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEFTTEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leftteam = iprot.readI32();
              struct.setLeftteamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RIGHTTEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rightteam = iprot.readI32();
              struct.setRightteamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BALLTIMELEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.balltimeleft = iprot.readBool();
              struct.setBalltimeleftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PLAYERSTAT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.playerstat = new ArrayList<PlayerStat>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  PlayerStat _elem10;
                  _elem10 = new PlayerStat();
                  _elem10.read(iprot);
                  struct.playerstat.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setPlayerstatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TSYNC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tsync = new TimeSync();
              struct.tsync.read(iprot);
              struct.setTsyncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LEFTTEAMTOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.leftteamtos = iprot.readString();
              struct.setLeftteamtosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RIGHTTEAMTOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rightteamtos = iprot.readString();
              struct.setRightteamtosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatusReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MATCHPROFILE_FIELD_DESC);
      oprot.writeI32(struct.matchprofile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MATCHPHASE_FIELD_DESC);
      oprot.writeI32(struct.matchphase);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEFTTEAM_FIELD_DESC);
      oprot.writeI32(struct.leftteam);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RIGHTTEAM_FIELD_DESC);
      oprot.writeI32(struct.rightteam);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALLTIMELEFT_FIELD_DESC);
      oprot.writeBool(struct.balltimeleft);
      oprot.writeFieldEnd();
      if (struct.playerstat != null) {
        oprot.writeFieldBegin(PLAYERSTAT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.playerstat.size()));
          for (PlayerStat _iter11 : struct.playerstat)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tsync != null) {
        oprot.writeFieldBegin(TSYNC_FIELD_DESC);
        struct.tsync.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.leftteamtos != null) {
        oprot.writeFieldBegin(LEFTTEAMTOS_FIELD_DESC);
        oprot.writeString(struct.leftteamtos);
        oprot.writeFieldEnd();
      }
      if (struct.rightteamtos != null) {
        oprot.writeFieldBegin(RIGHTTEAMTOS_FIELD_DESC);
        oprot.writeString(struct.rightteamtos);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusReportTupleSchemeFactory implements SchemeFactory {
    public StatusReportTupleScheme getScheme() {
      return new StatusReportTupleScheme();
    }
  }

  private static class StatusReportTupleScheme extends TupleScheme<StatusReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatusReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMatchprofile()) {
        optionals.set(0);
      }
      if (struct.isSetMatchphase()) {
        optionals.set(1);
      }
      if (struct.isSetLeftteam()) {
        optionals.set(2);
      }
      if (struct.isSetRightteam()) {
        optionals.set(3);
      }
      if (struct.isSetBalltimeleft()) {
        optionals.set(4);
      }
      if (struct.isSetPlayerstat()) {
        optionals.set(5);
      }
      if (struct.isSetTsync()) {
        optionals.set(6);
      }
      if (struct.isSetLeftteamtos()) {
        optionals.set(7);
      }
      if (struct.isSetRightteamtos()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetMatchprofile()) {
        oprot.writeI32(struct.matchprofile);
      }
      if (struct.isSetMatchphase()) {
        oprot.writeI32(struct.matchphase);
      }
      if (struct.isSetLeftteam()) {
        oprot.writeI32(struct.leftteam);
      }
      if (struct.isSetRightteam()) {
        oprot.writeI32(struct.rightteam);
      }
      if (struct.isSetBalltimeleft()) {
        oprot.writeBool(struct.balltimeleft);
      }
      if (struct.isSetPlayerstat()) {
        {
          oprot.writeI32(struct.playerstat.size());
          for (PlayerStat _iter12 : struct.playerstat)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetTsync()) {
        struct.tsync.write(oprot);
      }
      if (struct.isSetLeftteamtos()) {
        oprot.writeString(struct.leftteamtos);
      }
      if (struct.isSetRightteamtos()) {
        oprot.writeString(struct.rightteamtos);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatusReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.matchprofile = iprot.readI32();
        struct.setMatchprofileIsSet(true);
      }
      if (incoming.get(1)) {
        struct.matchphase = iprot.readI32();
        struct.setMatchphaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.leftteam = iprot.readI32();
        struct.setLeftteamIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rightteam = iprot.readI32();
        struct.setRightteamIsSet(true);
      }
      if (incoming.get(4)) {
        struct.balltimeleft = iprot.readBool();
        struct.setBalltimeleftIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.playerstat = new ArrayList<PlayerStat>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            PlayerStat _elem15;
            _elem15 = new PlayerStat();
            _elem15.read(iprot);
            struct.playerstat.add(_elem15);
          }
        }
        struct.setPlayerstatIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tsync = new TimeSync();
        struct.tsync.read(iprot);
        struct.setTsyncIsSet(true);
      }
      if (incoming.get(7)) {
        struct.leftteamtos = iprot.readString();
        struct.setLeftteamtosIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rightteamtos = iprot.readString();
        struct.setRightteamtosIsSet(true);
      }
    }
  }

}

