package hu.daq.thriftconnector.talkback;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PlayerStat implements org.apache.thrift.TBase<PlayerStat, PlayerStat._Fields>, java.io.Serializable, Cloneable, Comparable<PlayerStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlayerStat");

  private static final org.apache.thrift.protocol.TField PLAYERID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUMGOALS_FIELD_DESC = new org.apache.thrift.protocol.TField("numgoals", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUMPENALTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("numpenalties", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlayerStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlayerStatTupleSchemeFactory());
  }

  public int playerid; // required
  public int numgoals; // required
  public int numpenalties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAYERID((short)1, "playerid"),
    NUMGOALS((short)2, "numgoals"),
    NUMPENALTIES((short)3, "numpenalties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAYERID
          return PLAYERID;
        case 2: // NUMGOALS
          return NUMGOALS;
        case 3: // NUMPENALTIES
          return NUMPENALTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLAYERID_ISSET_ID = 0;
  private static final int __NUMGOALS_ISSET_ID = 1;
  private static final int __NUMPENALTIES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAYERID, new org.apache.thrift.meta_data.FieldMetaData("playerid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.NUMGOALS, new org.apache.thrift.meta_data.FieldMetaData("numgoals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.NUMPENALTIES, new org.apache.thrift.meta_data.FieldMetaData("numpenalties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlayerStat.class, metaDataMap);
  }

  public PlayerStat() {
  }

  public PlayerStat(
    int playerid,
    int numgoals,
    int numpenalties)
  {
    this();
    this.playerid = playerid;
    setPlayeridIsSet(true);
    this.numgoals = numgoals;
    setNumgoalsIsSet(true);
    this.numpenalties = numpenalties;
    setNumpenaltiesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlayerStat(PlayerStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.playerid = other.playerid;
    this.numgoals = other.numgoals;
    this.numpenalties = other.numpenalties;
  }

  public PlayerStat deepCopy() {
    return new PlayerStat(this);
  }

  @Override
  public void clear() {
    setPlayeridIsSet(false);
    this.playerid = 0;
    setNumgoalsIsSet(false);
    this.numgoals = 0;
    setNumpenaltiesIsSet(false);
    this.numpenalties = 0;
  }

  public int getPlayerid() {
    return this.playerid;
  }

  public PlayerStat setPlayerid(int playerid) {
    this.playerid = playerid;
    setPlayeridIsSet(true);
    return this;
  }

  public void unsetPlayerid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  /** Returns true if field playerid is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerid() {
    return EncodingUtils.testBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  public void setPlayeridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYERID_ISSET_ID, value);
  }

  public int getNumgoals() {
    return this.numgoals;
  }

  public PlayerStat setNumgoals(int numgoals) {
    this.numgoals = numgoals;
    setNumgoalsIsSet(true);
    return this;
  }

  public void unsetNumgoals() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMGOALS_ISSET_ID);
  }

  /** Returns true if field numgoals is set (has been assigned a value) and false otherwise */
  public boolean isSetNumgoals() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMGOALS_ISSET_ID);
  }

  public void setNumgoalsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMGOALS_ISSET_ID, value);
  }

  public int getNumpenalties() {
    return this.numpenalties;
  }

  public PlayerStat setNumpenalties(int numpenalties) {
    this.numpenalties = numpenalties;
    setNumpenaltiesIsSet(true);
    return this;
  }

  public void unsetNumpenalties() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMPENALTIES_ISSET_ID);
  }

  /** Returns true if field numpenalties is set (has been assigned a value) and false otherwise */
  public boolean isSetNumpenalties() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMPENALTIES_ISSET_ID);
  }

  public void setNumpenaltiesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMPENALTIES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAYERID:
      if (value == null) {
        unsetPlayerid();
      } else {
        setPlayerid((Integer)value);
      }
      break;

    case NUMGOALS:
      if (value == null) {
        unsetNumgoals();
      } else {
        setNumgoals((Integer)value);
      }
      break;

    case NUMPENALTIES:
      if (value == null) {
        unsetNumpenalties();
      } else {
        setNumpenalties((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAYERID:
      return Integer.valueOf(getPlayerid());

    case NUMGOALS:
      return Integer.valueOf(getNumgoals());

    case NUMPENALTIES:
      return Integer.valueOf(getNumpenalties());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAYERID:
      return isSetPlayerid();
    case NUMGOALS:
      return isSetNumgoals();
    case NUMPENALTIES:
      return isSetNumpenalties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlayerStat)
      return this.equals((PlayerStat)that);
    return false;
  }

  public boolean equals(PlayerStat that) {
    if (that == null)
      return false;

    boolean this_present_playerid = true;
    boolean that_present_playerid = true;
    if (this_present_playerid || that_present_playerid) {
      if (!(this_present_playerid && that_present_playerid))
        return false;
      if (this.playerid != that.playerid)
        return false;
    }

    boolean this_present_numgoals = true;
    boolean that_present_numgoals = true;
    if (this_present_numgoals || that_present_numgoals) {
      if (!(this_present_numgoals && that_present_numgoals))
        return false;
      if (this.numgoals != that.numgoals)
        return false;
    }

    boolean this_present_numpenalties = true;
    boolean that_present_numpenalties = true;
    if (this_present_numpenalties || that_present_numpenalties) {
      if (!(this_present_numpenalties && that_present_numpenalties))
        return false;
      if (this.numpenalties != that.numpenalties)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PlayerStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlayerid()).compareTo(other.isSetPlayerid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerid, other.playerid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumgoals()).compareTo(other.isSetNumgoals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumgoals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numgoals, other.numgoals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumpenalties()).compareTo(other.isSetNumpenalties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumpenalties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numpenalties, other.numpenalties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlayerStat(");
    boolean first = true;

    sb.append("playerid:");
    sb.append(this.playerid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numgoals:");
    sb.append(this.numgoals);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numpenalties:");
    sb.append(this.numpenalties);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayerStatStandardSchemeFactory implements SchemeFactory {
    public PlayerStatStandardScheme getScheme() {
      return new PlayerStatStandardScheme();
    }
  }

  private static class PlayerStatStandardScheme extends StandardScheme<PlayerStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlayerStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAYERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.playerid = iprot.readI32();
              struct.setPlayeridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMGOALS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numgoals = iprot.readI32();
              struct.setNumgoalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUMPENALTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numpenalties = iprot.readI32();
              struct.setNumpenaltiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlayerStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PLAYERID_FIELD_DESC);
      oprot.writeI32(struct.playerid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMGOALS_FIELD_DESC);
      oprot.writeI32(struct.numgoals);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMPENALTIES_FIELD_DESC);
      oprot.writeI32(struct.numpenalties);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayerStatTupleSchemeFactory implements SchemeFactory {
    public PlayerStatTupleScheme getScheme() {
      return new PlayerStatTupleScheme();
    }
  }

  private static class PlayerStatTupleScheme extends TupleScheme<PlayerStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlayerStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlayerid()) {
        optionals.set(0);
      }
      if (struct.isSetNumgoals()) {
        optionals.set(1);
      }
      if (struct.isSetNumpenalties()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPlayerid()) {
        oprot.writeI32(struct.playerid);
      }
      if (struct.isSetNumgoals()) {
        oprot.writeI32(struct.numgoals);
      }
      if (struct.isSetNumpenalties()) {
        oprot.writeI32(struct.numpenalties);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlayerStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.playerid = iprot.readI32();
        struct.setPlayeridIsSet(true);
      }
      if (incoming.get(1)) {
        struct.numgoals = iprot.readI32();
        struct.setNumgoalsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.numpenalties = iprot.readI32();
        struct.setNumpenaltiesIsSet(true);
      }
    }
  }

}

