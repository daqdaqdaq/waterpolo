package hu.daq.thriftconnector.talkback;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TimeSync implements org.apache.thrift.TBase<TimeSync, TimeSync._Fields>, java.io.Serializable, Cloneable, Comparable<TimeSync> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimeSync");

  private static final org.apache.thrift.protocol.TField BALLTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("balltime", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LEGTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("legtime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PENALTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("penalties", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TimeSyncStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TimeSyncTupleSchemeFactory());
  }

  public int balltime; // required
  public int legtime; // required
  public List<PenaltyTime> penalties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BALLTIME((short)1, "balltime"),
    LEGTIME((short)2, "legtime"),
    PENALTIES((short)3, "penalties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BALLTIME
          return BALLTIME;
        case 2: // LEGTIME
          return LEGTIME;
        case 3: // PENALTIES
          return PENALTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BALLTIME_ISSET_ID = 0;
  private static final int __LEGTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BALLTIME, new org.apache.thrift.meta_data.FieldMetaData("balltime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.LEGTIME, new org.apache.thrift.meta_data.FieldMetaData("legtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.PENALTIES, new org.apache.thrift.meta_data.FieldMetaData("penalties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PenaltyTime.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimeSync.class, metaDataMap);
  }

  public TimeSync() {
  }

  public TimeSync(
    int balltime,
    int legtime,
    List<PenaltyTime> penalties)
  {
    this();
    this.balltime = balltime;
    setBalltimeIsSet(true);
    this.legtime = legtime;
    setLegtimeIsSet(true);
    this.penalties = penalties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimeSync(TimeSync other) {
    __isset_bitfield = other.__isset_bitfield;
    this.balltime = other.balltime;
    this.legtime = other.legtime;
    if (other.isSetPenalties()) {
      List<PenaltyTime> __this__penalties = new ArrayList<PenaltyTime>(other.penalties.size());
      for (PenaltyTime other_element : other.penalties) {
        __this__penalties.add(new PenaltyTime(other_element));
      }
      this.penalties = __this__penalties;
    }
  }

  public TimeSync deepCopy() {
    return new TimeSync(this);
  }

  @Override
  public void clear() {
    setBalltimeIsSet(false);
    this.balltime = 0;
    setLegtimeIsSet(false);
    this.legtime = 0;
    this.penalties = null;
  }

  public int getBalltime() {
    return this.balltime;
  }

  public TimeSync setBalltime(int balltime) {
    this.balltime = balltime;
    setBalltimeIsSet(true);
    return this;
  }

  public void unsetBalltime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALLTIME_ISSET_ID);
  }

  /** Returns true if field balltime is set (has been assigned a value) and false otherwise */
  public boolean isSetBalltime() {
    return EncodingUtils.testBit(__isset_bitfield, __BALLTIME_ISSET_ID);
  }

  public void setBalltimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALLTIME_ISSET_ID, value);
  }

  public int getLegtime() {
    return this.legtime;
  }

  public TimeSync setLegtime(int legtime) {
    this.legtime = legtime;
    setLegtimeIsSet(true);
    return this;
  }

  public void unsetLegtime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGTIME_ISSET_ID);
  }

  /** Returns true if field legtime is set (has been assigned a value) and false otherwise */
  public boolean isSetLegtime() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGTIME_ISSET_ID);
  }

  public void setLegtimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGTIME_ISSET_ID, value);
  }

  public int getPenaltiesSize() {
    return (this.penalties == null) ? 0 : this.penalties.size();
  }

  public java.util.Iterator<PenaltyTime> getPenaltiesIterator() {
    return (this.penalties == null) ? null : this.penalties.iterator();
  }

  public void addToPenalties(PenaltyTime elem) {
    if (this.penalties == null) {
      this.penalties = new ArrayList<PenaltyTime>();
    }
    this.penalties.add(elem);
  }

  public List<PenaltyTime> getPenalties() {
    return this.penalties;
  }

  public TimeSync setPenalties(List<PenaltyTime> penalties) {
    this.penalties = penalties;
    return this;
  }

  public void unsetPenalties() {
    this.penalties = null;
  }

  /** Returns true if field penalties is set (has been assigned a value) and false otherwise */
  public boolean isSetPenalties() {
    return this.penalties != null;
  }

  public void setPenaltiesIsSet(boolean value) {
    if (!value) {
      this.penalties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BALLTIME:
      if (value == null) {
        unsetBalltime();
      } else {
        setBalltime((Integer)value);
      }
      break;

    case LEGTIME:
      if (value == null) {
        unsetLegtime();
      } else {
        setLegtime((Integer)value);
      }
      break;

    case PENALTIES:
      if (value == null) {
        unsetPenalties();
      } else {
        setPenalties((List<PenaltyTime>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BALLTIME:
      return Integer.valueOf(getBalltime());

    case LEGTIME:
      return Integer.valueOf(getLegtime());

    case PENALTIES:
      return getPenalties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BALLTIME:
      return isSetBalltime();
    case LEGTIME:
      return isSetLegtime();
    case PENALTIES:
      return isSetPenalties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimeSync)
      return this.equals((TimeSync)that);
    return false;
  }

  public boolean equals(TimeSync that) {
    if (that == null)
      return false;

    boolean this_present_balltime = true;
    boolean that_present_balltime = true;
    if (this_present_balltime || that_present_balltime) {
      if (!(this_present_balltime && that_present_balltime))
        return false;
      if (this.balltime != that.balltime)
        return false;
    }

    boolean this_present_legtime = true;
    boolean that_present_legtime = true;
    if (this_present_legtime || that_present_legtime) {
      if (!(this_present_legtime && that_present_legtime))
        return false;
      if (this.legtime != that.legtime)
        return false;
    }

    boolean this_present_penalties = true && this.isSetPenalties();
    boolean that_present_penalties = true && that.isSetPenalties();
    if (this_present_penalties || that_present_penalties) {
      if (!(this_present_penalties && that_present_penalties))
        return false;
      if (!this.penalties.equals(that.penalties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TimeSync other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBalltime()).compareTo(other.isSetBalltime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalltime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balltime, other.balltime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegtime()).compareTo(other.isSetLegtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legtime, other.legtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPenalties()).compareTo(other.isSetPenalties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenalties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penalties, other.penalties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimeSync(");
    boolean first = true;

    sb.append("balltime:");
    sb.append(this.balltime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("legtime:");
    sb.append(this.legtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("penalties:");
    if (this.penalties == null) {
      sb.append("null");
    } else {
      sb.append(this.penalties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimeSyncStandardSchemeFactory implements SchemeFactory {
    public TimeSyncStandardScheme getScheme() {
      return new TimeSyncStandardScheme();
    }
  }

  private static class TimeSyncStandardScheme extends StandardScheme<TimeSync> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimeSync struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BALLTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.balltime = iprot.readI32();
              struct.setBalltimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEGTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.legtime = iprot.readI32();
              struct.setLegtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PENALTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.penalties = new ArrayList<PenaltyTime>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  PenaltyTime _elem2;
                  _elem2 = new PenaltyTime();
                  _elem2.read(iprot);
                  struct.penalties.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPenaltiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimeSync struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BALLTIME_FIELD_DESC);
      oprot.writeI32(struct.balltime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEGTIME_FIELD_DESC);
      oprot.writeI32(struct.legtime);
      oprot.writeFieldEnd();
      if (struct.penalties != null) {
        oprot.writeFieldBegin(PENALTIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.penalties.size()));
          for (PenaltyTime _iter3 : struct.penalties)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimeSyncTupleSchemeFactory implements SchemeFactory {
    public TimeSyncTupleScheme getScheme() {
      return new TimeSyncTupleScheme();
    }
  }

  private static class TimeSyncTupleScheme extends TupleScheme<TimeSync> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimeSync struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBalltime()) {
        optionals.set(0);
      }
      if (struct.isSetLegtime()) {
        optionals.set(1);
      }
      if (struct.isSetPenalties()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBalltime()) {
        oprot.writeI32(struct.balltime);
      }
      if (struct.isSetLegtime()) {
        oprot.writeI32(struct.legtime);
      }
      if (struct.isSetPenalties()) {
        {
          oprot.writeI32(struct.penalties.size());
          for (PenaltyTime _iter4 : struct.penalties)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimeSync struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.balltime = iprot.readI32();
        struct.setBalltimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.legtime = iprot.readI32();
        struct.setLegtimeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.penalties = new ArrayList<PenaltyTime>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            PenaltyTime _elem7;
            _elem7 = new PenaltyTime();
            _elem7.read(iprot);
            struct.penalties.add(_elem7);
          }
        }
        struct.setPenaltiesIsSet(true);
      }
    }
  }

}

