/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package hu.daq.thriftconnector.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TimeDescriptor implements org.apache.thrift.TBase<TimeDescriptor, TimeDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TimeDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimeDescriptor");

  private static final org.apache.thrift.protocol.TField HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("hour", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("sec", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TSEC_FIELD_DESC = new org.apache.thrift.protocol.TField("tsec", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TimeDescriptorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TimeDescriptorTupleSchemeFactory());
  }

  public int hour; // optional
  public int min; // optional
  public int sec; // optional
  public int tsec; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOUR((short)1, "hour"),
    MIN((short)2, "min"),
    SEC((short)3, "sec"),
    TSEC((short)4, "tsec");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOUR
          return HOUR;
        case 2: // MIN
          return MIN;
        case 3: // SEC
          return SEC;
        case 4: // TSEC
          return TSEC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HOUR_ISSET_ID = 0;
  private static final int __MIN_ISSET_ID = 1;
  private static final int __SEC_ISSET_ID = 2;
  private static final int __TSEC_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.HOUR,_Fields.MIN,_Fields.SEC,_Fields.TSEC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOUR, new org.apache.thrift.meta_data.FieldMetaData("hour", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SEC, new org.apache.thrift.meta_data.FieldMetaData("sec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.TSEC, new org.apache.thrift.meta_data.FieldMetaData("tsec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimeDescriptor.class, metaDataMap);
  }

  public TimeDescriptor() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimeDescriptor(TimeDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    this.hour = other.hour;
    this.min = other.min;
    this.sec = other.sec;
    this.tsec = other.tsec;
  }

  public TimeDescriptor deepCopy() {
    return new TimeDescriptor(this);
  }

  @Override
  public void clear() {
    setHourIsSet(false);
    this.hour = 0;
    setMinIsSet(false);
    this.min = 0;
    setSecIsSet(false);
    this.sec = 0;
    setTsecIsSet(false);
    this.tsec = 0;
  }

  public int getHour() {
    return this.hour;
  }

  public TimeDescriptor setHour(int hour) {
    this.hour = hour;
    setHourIsSet(true);
    return this;
  }

  public void unsetHour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUR_ISSET_ID);
  }

  /** Returns true if field hour is set (has been assigned a value) and false otherwise */
  public boolean isSetHour() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUR_ISSET_ID);
  }

  public void setHourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUR_ISSET_ID, value);
  }

  public int getMin() {
    return this.min;
  }

  public TimeDescriptor setMin(int min) {
    this.min = min;
    setMinIsSet(true);
    return this;
  }

  public void unsetMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  public void setMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_ISSET_ID, value);
  }

  public int getSec() {
    return this.sec;
  }

  public TimeDescriptor setSec(int sec) {
    this.sec = sec;
    setSecIsSet(true);
    return this;
  }

  public void unsetSec() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEC_ISSET_ID);
  }

  /** Returns true if field sec is set (has been assigned a value) and false otherwise */
  public boolean isSetSec() {
    return EncodingUtils.testBit(__isset_bitfield, __SEC_ISSET_ID);
  }

  public void setSecIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEC_ISSET_ID, value);
  }

  public int getTsec() {
    return this.tsec;
  }

  public TimeDescriptor setTsec(int tsec) {
    this.tsec = tsec;
    setTsecIsSet(true);
    return this;
  }

  public void unsetTsec() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TSEC_ISSET_ID);
  }

  /** Returns true if field tsec is set (has been assigned a value) and false otherwise */
  public boolean isSetTsec() {
    return EncodingUtils.testBit(__isset_bitfield, __TSEC_ISSET_ID);
  }

  public void setTsecIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TSEC_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOUR:
      if (value == null) {
        unsetHour();
      } else {
        setHour((Integer)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((Integer)value);
      }
      break;

    case SEC:
      if (value == null) {
        unsetSec();
      } else {
        setSec((Integer)value);
      }
      break;

    case TSEC:
      if (value == null) {
        unsetTsec();
      } else {
        setTsec((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOUR:
      return Integer.valueOf(getHour());

    case MIN:
      return Integer.valueOf(getMin());

    case SEC:
      return Integer.valueOf(getSec());

    case TSEC:
      return Integer.valueOf(getTsec());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOUR:
      return isSetHour();
    case MIN:
      return isSetMin();
    case SEC:
      return isSetSec();
    case TSEC:
      return isSetTsec();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimeDescriptor)
      return this.equals((TimeDescriptor)that);
    return false;
  }

  public boolean equals(TimeDescriptor that) {
    if (that == null)
      return false;

    boolean this_present_hour = true && this.isSetHour();
    boolean that_present_hour = true && that.isSetHour();
    if (this_present_hour || that_present_hour) {
      if (!(this_present_hour && that_present_hour))
        return false;
      if (this.hour != that.hour)
        return false;
    }

    boolean this_present_min = true && this.isSetMin();
    boolean that_present_min = true && that.isSetMin();
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (this.min != that.min)
        return false;
    }

    boolean this_present_sec = true && this.isSetSec();
    boolean that_present_sec = true && that.isSetSec();
    if (this_present_sec || that_present_sec) {
      if (!(this_present_sec && that_present_sec))
        return false;
      if (this.sec != that.sec)
        return false;
    }

    boolean this_present_tsec = true && this.isSetTsec();
    boolean that_present_tsec = true && that.isSetTsec();
    if (this_present_tsec || that_present_tsec) {
      if (!(this_present_tsec && that_present_tsec))
        return false;
      if (this.tsec != that.tsec)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TimeDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHour()).compareTo(other.isSetHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hour, other.hour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin()).compareTo(other.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, other.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSec()).compareTo(other.isSetSec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sec, other.sec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTsec()).compareTo(other.isSetTsec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTsec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tsec, other.tsec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimeDescriptor(");
    boolean first = true;

    if (isSetHour()) {
      sb.append("hour:");
      sb.append(this.hour);
      first = false;
    }
    if (isSetMin()) {
      if (!first) sb.append(", ");
      sb.append("min:");
      sb.append(this.min);
      first = false;
    }
    if (isSetSec()) {
      if (!first) sb.append(", ");
      sb.append("sec:");
      sb.append(this.sec);
      first = false;
    }
    if (isSetTsec()) {
      if (!first) sb.append(", ");
      sb.append("tsec:");
      sb.append(this.tsec);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimeDescriptorStandardSchemeFactory implements SchemeFactory {
    public TimeDescriptorStandardScheme getScheme() {
      return new TimeDescriptorStandardScheme();
    }
  }

  private static class TimeDescriptorStandardScheme extends StandardScheme<TimeDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimeDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hour = iprot.readI32();
              struct.setHourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min = iprot.readI32();
              struct.setMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sec = iprot.readI32();
              struct.setSecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TSEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tsec = iprot.readI32();
              struct.setTsecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimeDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetHour()) {
        oprot.writeFieldBegin(HOUR_FIELD_DESC);
        oprot.writeI32(struct.hour);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMin()) {
        oprot.writeFieldBegin(MIN_FIELD_DESC);
        oprot.writeI32(struct.min);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        oprot.writeI32(struct.sec);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTsec()) {
        oprot.writeFieldBegin(TSEC_FIELD_DESC);
        oprot.writeI32(struct.tsec);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimeDescriptorTupleSchemeFactory implements SchemeFactory {
    public TimeDescriptorTupleScheme getScheme() {
      return new TimeDescriptorTupleScheme();
    }
  }

  private static class TimeDescriptorTupleScheme extends TupleScheme<TimeDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimeDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHour()) {
        optionals.set(0);
      }
      if (struct.isSetMin()) {
        optionals.set(1);
      }
      if (struct.isSetSec()) {
        optionals.set(2);
      }
      if (struct.isSetTsec()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetHour()) {
        oprot.writeI32(struct.hour);
      }
      if (struct.isSetMin()) {
        oprot.writeI32(struct.min);
      }
      if (struct.isSetSec()) {
        oprot.writeI32(struct.sec);
      }
      if (struct.isSetTsec()) {
        oprot.writeI32(struct.tsec);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimeDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.hour = iprot.readI32();
        struct.setHourIsSet(true);
      }
      if (incoming.get(1)) {
        struct.min = iprot.readI32();
        struct.setMinIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sec = iprot.readI32();
        struct.setSecIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tsec = iprot.readI32();
        struct.setTsecIsSet(true);
      }
    }
  }

}

